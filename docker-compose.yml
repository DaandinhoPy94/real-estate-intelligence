version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: real_estate_db
    environment:
      POSTGRES_DB: real_estate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: real_estate_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow
  airflow-init:
    image: apache/airflow:2.7.3-python3.9
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/real_estate
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./requirements.txt:/requirements.txt
    command: |
      bash -c "
        pip install -r /requirements.txt &&
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    image: apache/airflow:2.7.3-python3.9
    container_name: real_estate_airflow
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/real_estate
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    command: |
      bash -c "
        pip install -r /requirements.txt &&
        airflow webserver
      "
    depends_on:
      - airflow-init
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.7.3-python3.9
    container_name: real_estate_scheduler
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/real_estate
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./requirements.txt:/requirements.txt
    command: |
      bash -c "
        pip install -r /requirements.txt &&
        airflow scheduler
      "
    depends_on:
      - airflow-init

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: real_estate_api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/real_estate
      REDIS_URL: redis://redis:6379
    volumes:
      - ./api:/app/api
      - ./ml:/app/ml
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # MLflow for experiment tracking
  mlflow:
    image: python:3.9-slim
    container_name: real_estate_mlflow
    ports:
      - "5000:5000"
    environment:
      BACKEND_STORE_URI: postgresql://postgres:postgres@postgres:5432/real_estate
      ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow/artifacts
    command: |
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server --backend-store-uri postgresql://postgres:postgres@postgres:5432/real_estate --default-artifact-root /mlflow/artifacts --host 0.0.0.0 --port 5000
      "
    depends_on:
      postgres:
        condition: service_healthy

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: real_estate_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  grafana_data: